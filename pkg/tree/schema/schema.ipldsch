type ProllyNode struct {
    # 0 for leaf nodes, and add 1 for parent level
    isLeaf Bool
    # raw keys(keys/values input from users) for leaf node. For branch nodes, the key is last key in the child node,
    # first key in the child node
	keys [Bytes]
	# input data from users for leaf nodes, Link for branch nodes
    values [Any]
} representation tuple

type TProllyNode struct {
    # 0 for leaf nodes, and add 1 for parent level
    isLeaf Bool
    pairs [Entry]
} representation tuple

type Entry struct{
    key Bytes
    value Any
} representation tuple

type ProllyRoot struct{
    # root ProllyNode of tree
    RootCid &ProllyNode
    # config about the tree
    Config ChunkConfig
}

type WeibullThresholdConfig struct{
    # shape parameter, default value is 4
    K           Float
    # scale parameter(Î»), default value is 4096
    L           Float
} representation tuple


# rollingHashSplitter is a nodeSplitter that makes chunk boundary decisions using
# a rolling value hasher that processes Item pairs in a byte-wise fashion.
#
# rollingHashSplitter uses a dynamic hash pattern designed to constrain the chunk
# Size distribution by reducing the likelihood of forming very large or very small
# chunks. As the Size of the current chunk grows, rollingHashSplitter changes the
# target pattern to make it easier to match. The result is a chunk Size distribution
# that is closer to a binomial distribution, rather than geometric.
type RollingHashConfig struct{
    rollingHashWindow   Int
} representation tuple

type PrefixThresholdConfig struct {
    chunkingFactor Int
} representation tuple

# Chunk Config for prolly tree, it includes some global setting, the splitter method you choose and specific configs about
# the splitter
type ChunkConfig struct{
    chunkStrategy ChunkStrategy
    minNodeSize Int
    maxNodeSize Int
    strategy      strategy
} representation tuple

type strategy union {
    | WeibullThresholdConfig    "weibull"
    | RollingHashConfig         "rollinghash"
    | PrefixThresholdConfig     "prefix"
} representation keyed

type ChunkStrategy enum {
  | PrefixThreshold
  | WeibullThreshold
  | RollingHash
} representation string